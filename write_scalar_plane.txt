  print *, '1 - output2D:', output2D
    
  ! Switch to output2D with z-normal plane
  output2D = 3
  
  print *, '2 - output2D:', output2D

!--- Write snapshot part ---!
  
#ifdef ADIOS2
  call decomp_2d_start_io(io_name, "data")
#endif
    
  ! Snapshot number
#ifndef ADIOS2
  if (filenamedigits) then
     ! New enumeration system, it works integrated with xcompact3d_toolbox
     write(num, ifilenameformat) itime
  else
     ! Classic enumeration system
     write(num, ifilenameformat) itime/ioutput_plane
  endif
#else
  ! ADIOS2 is zero-indexed
  write(num, '(I0)') itime/ioutput_plane - 1
#endif
    
  ! Write XDMF header
  call write_xdmf_header(".", "planes/phi-plane", trim(num))
   
  ! Write first scalar field
  call write_field(phi1(:,:,:,1), ".", "planes/phi01-p", trim(num))
  
!--- End snapshot part ---!
  
  ! Write XDMF footer
  call write_xdmf_footer()
  
#ifdef ADIOS2
  call decomp_2d_end_io(io_name, "data")
#endif

!-------------------------!
  print *, '3 - output2D:', output2D
  
  ! Switch back to 3D output for default snapshots
  output2D = 0
     
  print *, '4 - output2D:', output2D 
  
  
  
  
  
  
  
   
  !------------------------------------------------------------!
  ! Write the header of the XDMF file for scalar-plane saving. !
  !                                                            !
  ! Adapted from 'write_xdmf_header' subroutine visu module.   !
  !------------------------------------------------------------!

  subroutine write_xdmf_header_plane(pathname, filename, num)

    use variables, only : nvisu, yp
    use param,     only : dx,dy,dz,istret
    use decomp_2d, only : mytype, nrank, xszV, yszV, zszV, ystV

    implicit none

    ! Arguments
    character(len=*), intent(in) :: pathname, filename, num

    ! Local variables
    integer :: i,k
    real(mytype) :: xp(xszV(1)), zp(zszV(3))

    if (nrank.eq.0) then
      open(newunit=ioxdmf,file="./data/"//gen_snapshotname(pathname, filename, num, "xdmf"))

      write(ioxdmf,'(A22)')'<?xml version="1.0" ?>'
      write(ioxdmf,*)'<!DOCTYPE Xdmf SYSTEM "Xdmf.dtd" []>'
      write(ioxdmf,*)'<Xdmf xmlns:xi="http://www.w3.org/2001/XInclude" Version="2.0">'
      write(ioxdmf,*)'<Domain>'
      
      if (istret.ne.0) then
        do i=1,xszV(1)
          xp(i) = real(i-1,mytype)*dx*nvisu
        enddo
        do k=1,zszV(3)
          zp(k) = real(k-1,mytype)*dz*nvisu
        enddo
        
        write(ioxdmf,*)'    <Topology name="topo" TopologyType="3DRectMesh"'
        write(ioxdmf,*)'        Dimensions="',1,yszV(2),xszV(1),'">'
        write(ioxdmf,*)'    </Topology>'
        
        write(ioxdmf,*)'    <Geometry name="geo" Type="VXVYVZ">'
        write(ioxdmf,*)'        <DataItem Dimensions="',xszV(1),'" NumberType="Float" Precision="4" Format="XML">'
        write(ioxdmf,*)'        ',xp(:)
        write(ioxdmf,*)'        </DataItem>'
        write(ioxdmf,*)'        <DataItem Dimensions="',yszV(2),'" NumberType="Float" Precision="4" Format="XML">'
        write(ioxdmf,*)'        ',yp(ystV(1)::nvisu)
        write(ioxdmf,*)'        </DataItem>'
        write(ioxdmf,*)'        <DataItem Dimensions="1" NumberType="Float" Precision="4" Format="XML">'
        write(ioxdmf,*)'        ',zp(1)
        write(ioxdmf,*)'        </DataItem>'
        write(ioxdmf,*)'    </Geometry>'
      else
      
        write(ioxdmf,*)'    <Topology name="topo" TopologyType="3DCoRectMesh"'
        write(ioxdmf,*)'        Dimensions="',1,yszV(2),xszV(1),'">'      
        write(ioxdmf,*)'    </Topology>'
        
        write(ioxdmf,*)'    <Geometry name="geo" Type="ORIGIN_DXDYDZ">'
        write(ioxdmf,*)'        <!-- Origin -->'
        write(ioxdmf,*)'        <DataItem Format="XML" Dimensions="3">'
        write(ioxdmf,*)'        0.0 0.0 0.0'
        write(ioxdmf,*)'        </DataItem>'
        write(ioxdmf,*)'        <!-- DxDyDz -->'
        write(ioxdmf,*)'        <DataItem Format="XML" Dimensions="3">'
        write(ioxdmf,*)'        ',1.,dy,dx
        write(ioxdmf,*)'        </DataItem>'
        write(ioxdmf,*)'    </Geometry>'
      
      endif
      
        write(ioxdmf,*)'    <Grid Name="'//num//'" GridType="Uniform">'
        write(ioxdmf,*)'        <Topology Reference="/Xdmf/Domain/Topology[1]"/>'
        write(ioxdmf,*)'        <Geometry Reference="/Xdmf/Domain/Geometry[1]"/>'
    
        write(ioxdmf,*)'        <Attribute Name="'//filename//'" Center="Node">'
#ifndef ADIOS2
        write(ioxdmf,*)'           <DataItem Format="Binary"'
#else
        write(ioxdmf,*)'           <DataItem Format="HDF"'
#endif
#ifdef DOUBLE_PREC
#ifdef SAVE_SINGLE
        write(ioxdmf,*)'            DataType="Float" Precision="8" Endian="little" Seek="0"'
#else
        write(ioxdmf,*)'            DataType="Float" Precision="8" Endian="little" Seek="0"'
#endif
#else
        write(ioxdmf,*)'            DataType="Float" Precision="4" Endian="little" Seek="0"'
#endif
        write(ioxdmf,*)'            Dimensions="',1,yszV(2),xszV(1),'">'
        write(ioxdmf,*)'              '//gen_h5path(gen_filename(pathname, filename, num, 'bin'), num)
        write(ioxdmf,*)'           </DataItem>'
        write(ioxdmf,*)'        </Attribute>'

      endif

  end subroutine write_xdmf_header_plane
